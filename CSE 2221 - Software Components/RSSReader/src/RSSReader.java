import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author SeongRok Ha
 * @version September 25th, 2019
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int indexTitle = getChildElement(channel, "title");
        int indexLink = getChildElement(channel, "link");
        int indexDescription = getChildElement(channel, "description");

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + channel.child(indexTitle).child(0).label()
                + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(" <h1><a href=" + "\""
                + channel.child(indexLink).child(0).label() + "\"" + ">"
                + channel.child(indexTitle).child(0).label() + "</a></h1>");
        out.println(" <p>" + channel.child(indexDescription).child(0).label()
                + "</p>");
        out.println(" <table border = \"1\">");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(" </table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean temp = false;
        int counter = 0;
        while (temp == false && counter < xml.numberOfChildren()) {
            if (xml.child(counter).label().equals(tag)) {
                temp = true;
            }

            counter++;
        }

        if (temp == false) {
            counter = 0;
        }

        return (counter - 1);
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("  <tr>");
        String pubdate = "";
        String source = "";
        String title = "";

        for (int i = 0; i < item.numberOfChildren(); i++) {

            if (item.child(i).label().equals("pubDate")) {
                pubdate = ("   <td>" + item.child(i).child(0).label()
                        + "</td>");
            } else if (item.child(i).label().equals("source")) {
                if (item.child(i).hasAttribute("url")) {
                    source = ("   <td> <a href=" + "\""
                            + item.child(i).attributeValue("url") + "\"" + " >"
                            + item.child(i).child(0).label() + "</a></td>");
                } else {
                    source = ("   <td>" + item.child(i).child(0).label()
                            + "</td>");
                }
            } else if (item.child(i).label().equals("title")) {

                if (getChildElement(item, "link") != -1) {
                    title = ("   <td> <a href="
                            + item.child(getChildElement(item, "link")).child(0)
                                    .label()
                            + ">" + item.child(i).child(0).label()
                            + "</a></td>");
                } else {
                    title = ("   <td>" + item.child(i).child(0).label()
                            + "</td>");
                }

            }
        }
        out.println(pubdate);
        out.println(source);
        if (title.equals("")) {
            if (getChildElement(item, "description") != -1) {
                if (getChildElement(item, "link") != -1) {
                    title = ("   <td> <a href="
                            + item.child(getChildElement(item, "link")).child(0)
                                    .label()
                            + ">"
                            + item.child(getChildElement(item, "description"))
                                    .child(0).label()
                            + "</a></td>");
                } else {
                    title = ("   <td>"
                            + item.child(getChildElement(item, "description"))
                                    .child(0).label()
                            + "</td>");
                }
            } else {
                out.println("No Title Available");
            }
        } else {
            out.println(title);
        }

        out.println("  </tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        SimpleWriter fileOut = new SimpleWriter1L("test.html");

        XMLTree xml = new XMLTree1("https://news.yahoo.com/rss/mostviewed");
        XMLTree channel = xml.child(0);

        outputHeader(channel, fileOut);

        fileOut.println("  <tr>");
        fileOut.println("   <th>Date</th>");
        fileOut.println("   <th>Source</th>");
        fileOut.println("   <th>News</th>");
        fileOut.println("  </tr>");

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), fileOut);
            }
        }

        outputFooter(fileOut);

        in.close();
        out.close();
    }

}