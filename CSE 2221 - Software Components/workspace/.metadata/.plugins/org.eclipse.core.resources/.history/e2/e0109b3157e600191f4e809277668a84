import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author SeongRok Ha
 * @version September 25th, 2019
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int indexTitle = getChildElement(channel, "title");
        int indexLink = getChildElement(channel, "link");
        int indexDescription = getChildElement(channel, "description");

        out.println("<html>");
        out.println(" <head>");
        out.println("  <title>" + channel.child(indexTitle).child(0).label()
                + "</title>");
        out.println(" </head>");
        out.println(" <body>");
        out.println("   <h1><a href=" + "\""
                + channel.child(indexLink).child(0).label() + "\"" + ">"
                + channel.child(indexTitle).child(0).label() + "</a></h1>");
        out.println(" <p>" + channel.child(indexDescription).child(0).label()
                + "</p>");
        out.println(" <table border = \"1\">");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(" </table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean temp = false;
        int counter = 0;
        while (temp == false && counter < xml.numberOfChildren()) {
            if (xml.child(counter).label().equals(tag)) {
                temp = true;
            }

            counter++;
        }

        if (temp == false) {
            counter = 0;
        }

        return (counter - 1);
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("  <tr>");

        int pubIndex = getChildElement(item, "pubDate");
        int srcIndex = getChildElement(item, "source");
        int titleIndex = getChildElement(item, "title");
        String pubdate = "";
        String source = "";
        String title = "";

        if (pubIndex != -1) {
            pubdate = ("<td>" + item.child(pubIndex).child(0).label()
                    + "</td>");
        } else {
            pubdate = "<td> No date Available </td>";
        }

        if (srcIndex != -1) {
            if (item.child(srcIndex).hasAttribute("url")) {
                source = ("   <td> <a href=" + "\""
                        + item.child(srcIndex).attributeValue("url") + "\""
                        + ">" + item.child(srcIndex).child(0).label()
                        + "</a></td>");
            } else {
                source = item.child(srcIndex).child(0).label();
            }
        } else {
            source = "<td> No Source Available </td>";
        }

        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            if (getChildElement(item, "link") != -1
                    && item.child(getChildElement(item, "link"))
                            .numberOfChildren() > 0) {
                title = ("   <td> <a href=" + "\""
                        + item.child(getChildElement(item, "link")).child(0)
                                .label()
                        + "\"" + ">" + item.child(titleIndex).child(0).label()
                        + "</a></td>");
            } else {
                title = "   <td>" + item.child(titleIndex).child(0).label()
                        + "</td>";
            }
        } else {
            if (getChildElement(item, "description") != -1) {
                if (getChildElement(item, "link") != -1) {
                    title = ("   <td> <a href=" + "\""
                            + item.child(getChildElement(item, "link")).child(0)
                                    .label()
                            + "\"" + ">"
                            + item.child(getChildElement(item, "description"))
                                    .child(0).label()
                            + "</a></td>");
                } else {
                    title = "   <td>"
                            + item.child(getChildElement(item, "description"))
                                    .child(0).label()
                            + "</td>";
                }
            } else {
                title = "<td> No Title Available </td>";
            }
        }

        out.println(pubdate);
        out.println(source);
        out.println(title);

        out.println("  </tr>");
    }

    /**
     *  * Processes one XML RSS (version 2.0) feed from a given URL converting
     * it  * into the corresponding HTML output file.  *  * @param url
     *  *            the URL of the RSS feed  * @param file  *            the
     * name of the HTML output file  * @param out  *            the output
     * stream to report progress or errors  * @updates out.content  * @requires
     * out.is_open  * @ensures <pre>
      * [reads RSS feed from url, saves HTML document with table of news items
      *   to file, appends to out.content any needed messages]
      * </pre>
     */

    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);
        SimpleWriter fileOut = new SimpleWriter1L(file);

        fileOut.println("<html>");
        fileOut.println(" <head>");
        fileOut.println("  <title>" + xml.attributeValue("title") + "</title>");
        fileOut.println(" </head>");
        fileOut.println(" <body>");
        fileOut.println("  <h2>" + xml.attributeValue("title") + "</h2>");
        fileOut.println("  <ul>");
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            fileOut.println("   <li>");
            fileOut.println("    <a href=" + "\""
                    + xml.child(i).attributeValue("file") + "\"" + " >"
                    + xml.child(i).attributeValue("name") + "</a></td>");
            fileOut.println("   </li>");
        }

        fileOut.println("  </ul>");
        fileOut.println(" </body>");
        fileOut.println("</html>");

        for (int x = 0; x < xml.numberOfChildren(); x++) {
            SimpleWriter fileRSS = new SimpleWriter1L(
                    xml.child(x).attributeValue("file"));

            XMLTree rssTree = new XMLTree1(xml.child(x).attributeValue("url"));
            XMLTree channel = rssTree.child(0);

            outputHeader(channel, fileRSS);

            fileRSS.println("  <tr>");
            fileRSS.println("   <th>Date</th>");
            fileRSS.println("   <th>Source</th>");
            fileRSS.println("   <th>News</th>");
            fileRSS.println("  </tr>");

            for (int y = 0; y < channel.numberOfChildren(); y++) {
                if (channel.child(y).label().equals("item")) {
                    processItem(channel.child(y), fileRSS);
                }
            }

            fileRSS.println(" </tbody>");
            outputFooter(fileRSS);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please Enter the link : ");
        String url = in.nextLine();

        out.println("Please Enter the file name : ");
        String file = in.nextLine();

        processFeed(url, file, out);

        in.close();
        out.close();
    }

}