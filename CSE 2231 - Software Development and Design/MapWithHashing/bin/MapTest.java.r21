import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.map.Map;

/**
 * JUnit test fixture for {@code Map<String, String>}'s constructor and kernel
 * methods.
 *
 * @author Uijong Kim
 * @author Seongrok Ha
 * @version 020620
 *
 */
public abstract class MapTest {

    /**
     * Invokes the appropriate {@code Map} constructor for the implementation
     * under test and returns the result.
     *
     * @return the new map
     * @ensures constructorTest = {}
     */
    protected abstract Map<String, String> constructorTest();

    /**
     * Invokes the appropriate {@code Map} constructor for the reference
     * implementation and returns the result.
     *
     * @return the new map
     * @ensures constructorRef = {}
     */
    protected abstract Map<String, String> constructorRef();

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the implementation
     * under test type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsTest = [pairs in args]
     */
    private Map<String, String> createFromArgsTest(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorTest();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }

    /**
     *
     * Creates and returns a {@code Map<String, String>} of the reference
     * implementation type with the given entries.
     *
     * @param args
     *            the (key, value) pairs for the map
     * @return the constructed map
     * @requires <pre>
     * [args.length is even]  and
     * [the 'key' entries in args are unique]
     * </pre>
     * @ensures createFromArgsRef = [pairs in args]
     */
    private Map<String, String> createFromArgsRef(String... args) {
        assert args.length % 2 == 0 : "Violation of: args.length is even";
        Map<String, String> map = this.constructorRef();
        for (int i = 0; i < args.length; i += 2) {
            assert !map.hasKey(args[i]) : ""
                    + "Violation of: the 'key' entries in args are unique";
            map.add(args[i], args[i + 1]);
        }
        return map;
    }
    
    @Test
    public final void testConstructorWithEmpty() {
    	Map<String, String> mapTest = this.createFromArgsTest();
    	Map<String, String> mapRef = this.createFromArgsRef();
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testConstructorWithEmptyString() {
    	Map<String, String> mapTest = this.createFromArgsTest("", "");
    	Map<String, String> mapRef = this.createFromArgsRef("", "");
    	
    	assertEquals(mapRef, mapTest);    	
    }
    
    @Test
    public final void testConstructorWithGeneralString() {
    	Map<String, String> mapTest = this.createFromArgsTest("Apple", "Fruit");
    	Map<String, String> mapRef = this.createFromArgsRef("Apple", "Fruit");
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testConstructorWithSeveralString() {
    	Map<String, String> mapTest = this.createFromArgsTest("Apple", "Fruit", "Banana", "Fruit", "iPhone", "Device");
    	Map<String, String> mapRef = this.createFromArgsRef("Apple", "Fruit", "Banana", "Fruit", "iPhone", "Device");
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testAddWithEmptyString() {
    	Map<String, String> mapTest = this.createFromArgsTest();
    	Map<String, String> mapRef = this.createFromArgsRef();
    	
    	mapTest.add("", "");
    	mapRef.add("", "");
    }
    
    @Test
    public final void testAddWithGeneralString() {
    	Map<String, String> mapTest = this.createFromArgsTest();
    	Map<String, String> mapRef = this.createFromArgsRef();
    	
    	mapTest.add("Apple", "Fruit");
    	mapRef.add("Apple", "Fruit");
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testAddWithIntegerString() {
    	Map<String, String> mapTest = this.createFromArgsTest();
    	Map<String, String> mapRef = this.createFromArgsRef();
    	
    	mapTest.add("122", "132");
    	mapRef.add("122", "132");
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testAddWithForLoop() {
    	Map<String, String> mapTest = this.createFromArgsTest();
    	Map<String, String> mapRef = this.createFromArgsRef();
    	
    	for (int i = 0; i < 10; i++) {
    		mapTest.add(i + 1 + "", i + "");
    		mapRef.add(i + 1 + "", i + "");
    	}
    	
    	assertEquals(mapRef.size(), mapTest.size());
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testRemoveAnyWithEmptyStringMap() {
    	Map<String, String> mapTest = this.createFromArgsTest("", "");
    	Map<String, String> mapRef = this.createFromArgsRef("", "");
    	
    	mapTest.removeAny();
    	mapRef.removeAny();
    	
    	assertEquals(mapRef, mapTest);
    }
    
    @Test
    public final void testRemoveAnyWithGeneralMap() {
    	Map<String, String> mapTest = this.createFromArgsTest("Apple", "Fruit", "Banana", "Fruit", "iPhone", "Device");
    	Map<String, String> mapRef = this.createFromArgsRef("Apple", "Fruit", "Banana", "Fruit", "iPhone", "Device");
    	
    	
    	mapTest.removeAny();
    	mapRef.removeAny();
    	
    	assertEquals(mapRef.size(), mapTest.size());
    }
    
    @Test
    public final void testRemoveAnyWithIntegerAndSpecialChar() {
    	Map<String, String> mapTest = this.createFromArgsTest("1", "2", "3", "4", "5", "6", "7", "&", "*", "!", "@", "$");
    	Map<String, String> mapRef = this.createFromArgsRef("1", "2", "3", "4", "5", "6", "7", "&", "*", "!", "@", "$");
    	
    	mapTest.removeAny();
    	mapRef.removeAny();
    	
    	assertEquals(mapRef.size(), mapTest.size());
    	
    	
    }

}
